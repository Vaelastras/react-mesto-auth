{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  getInfoFromServer() {\n    return Promise.all([this.getUserInfo(), this.getInitialCards()]);\n  } // обработчик респонсов сервера\n\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Error! : ${res.status}`);\n    }\n  } // получение начальных данных от пользователя\n\n\n  getUserInfo() {\n    // Запрос на загрузку данных пользователя\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  } // получение серверных карточек\n\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  } //установка данных профиля\n\n\n  patchUserProfile(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._handleResponse);\n  } // смена аватары\n\n\n  patchAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar.avatar\n      })\n    }).then(this._handleResponse);\n  }\n\n  postUserCard(item) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: item.name,\n        link: item.link\n      })\n    }).then(this._handleResponse);\n  } // changeLikeCardStatus(id, isLiked) {\n  //   if (isLiked) {\n  //     return (\n  //       fetch(`${this._baseUrl}/cards/likes/${id}`, {\n  //         method: 'PUT',\n  //         headers: this._headers\n  //       })\n  //       .then(this._handleResponse)\n  //     )\n  //   }\n  //   else {\n  //     return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n  //       method: 'PUT',\n  //       headers: this._headers\n  //     })\n  //     .then(this._handleResponse)\n  //   }\n  // }\n  //  постановка лаек\n\n\n  putLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._handleResponse);\n  } // снятие лаека\n\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  } // удалить карточку\n\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-14',\n  headers: {\n    authorization: '3cd7525a-bdb0-4a65-a82d-96b8a4b1711a',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["/Users/vaelastras/Yandex/react-mesto-auth/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","getInfoFromServer","Promise","all","getUserInfo","getInitialCards","_handleResponse","res","ok","json","reject","status","fetch","then","patchUserProfile","data","method","body","JSON","stringify","name","about","patchAvatar","avatar","postUserCard","item","link","putLike","id","deleteLike","deleteCard","api","authorization"],"mappings":"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","sourcesContent":["  class Api {\n  constructor({baseUrl, headers}) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  getInfoFromServer() {\n    return Promise.all([this.getUserInfo(),this.getInitialCards()])\n  }\n\n\n  // обработчик респонсов сервера\n  _handleResponse(res){\n    if (res.ok) {\n      return res.json();\n      } else {\n      return Promise.reject(`Error! : ${res.status}`)\n    }\n\n  }\n\n  // получение начальных данных от пользователя\n  getUserInfo() { // Запрос на загрузку данных пользователя\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    })\n    .then(this._handleResponse)\n  }\n\n\n  // получение серверных карточек\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }\n    )\n    .then(this._handleResponse)\n  }\n\n  //установка данных профиля\n  patchUserProfile(data) {\n    return fetch(`${this._baseUrl}/users/me`,\n      {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify({\n          name: data.name,\n          about: data.about\n        })\n      })\n      .then(this._handleResponse)\n  }\n\n\n  // смена аватары\n  patchAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`,  {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar.avatar\n      })\n    })\n      .then(this._handleResponse)\n  }\n\n postUserCard(item) {\n  return fetch(`${this._baseUrl}/cards`,  {\n    method: 'POST',\n    headers: this._headers,\n    body: JSON.stringify({\n        name: item.name,\n        link: item.link\n      })\n    })\n    .then(this._handleResponse)\n  }\n\n    // changeLikeCardStatus(id, isLiked) {\n    //   if (isLiked) {\n    //     return (\n    //       fetch(`${this._baseUrl}/cards/likes/${id}`, {\n    //         method: 'PUT',\n    //         headers: this._headers\n    //       })\n    //       .then(this._handleResponse)\n    //     )\n    //   }\n    //   else {\n    //     return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n    //       method: 'PUT',\n    //       headers: this._headers\n    //     })\n    //     .then(this._handleResponse)\n    //   }\n    // }\n\n\n  //  постановка лаек\n  putLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this._headers\n      })\n      .then(this._handleResponse)\n  }\n\n  // снятие лаека\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n      }\n    )\n      .then(this._handleResponse)\n  }\n\n  // удалить карточку\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`,  {\n      method: 'DELETE',\n      headers: this._headers\n      }\n    )\n      .then(this._handleResponse)\n  }\n\n}\n\n\nexport const api = new Api({\n  baseUrl:'https://mesto.nomoreparties.co/v1/cohort-14',\n  headers: {\n    authorization: '3cd7525a-bdb0-4a65-a82d-96b8a4b1711a',\n    'Content-Type': 'application/json'}\n});"]},"metadata":{},"sourceType":"module"}